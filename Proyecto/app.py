import streamlit as st
import pandas as pd

# --- Login ---
def login():
    st.sidebar.title("Inicio de Sesi칩n")
    username = st.sidebar.text_input("Usuario")
    password = st.sidebar.text_input("Contrase침a", type="password")
    
    if st.sidebar.button("Ingresar"):
        if username == "admin" and password == "admin":
            st.session_state["logged_in"] = True
        else:
            st.error("Credenciales inv치lidas")

# --- Dashboard Plantilla ---
def dashboard():
    st.title("游늵 Dashboard de Monitoreo de Repositorios Acad칠micos")

    # --- Cargar CSVs ---
    commits_data = pd.read_csv("commits_data.csv")
    repos_data = pd.read_csv("repos_data.csv")

    # --- Secci칩n de Filtros ---
    st.sidebar.header("Filtros")

    # Repositorios 칰nicos para selecci칩n
    repos_list = repos_data['name'].dropna().unique()  # 'name' de repos_data
    selected_repo = st.sidebar.selectbox("Selecciona un repositorio", repos_list)

    # A침os 칰nicos basados en commits (suponiendo que hay una columna 'commit_date')
    if 'commit_date' in commits_data.columns:
        commits_data['commit_date'] = pd.to_datetime(commits_data['commit_date'])
        years = commits_data['commit_date'].dt.year.unique()
        selected_year = st.sidebar.selectbox("Selecciona un a침o", sorted(years))
    else:
        selected_year = None

    # --- Filtros aplicados ---
    if selected_year:
        filtered_commits = commits_data[
            (commits_data['repo_name'] == selected_repo) &  # 'repos_name' de commits_data
            (commits_data['commit_date'].dt.year == selected_year)
        ]
    else:
        filtered_commits = commits_data[commits_data['repo_name'] == selected_repo]  # 'repos_name' de commits_data

    filtered_repo_info = repos_data[repos_data['name'] == selected_repo]  # 'name' de repos_data

    # --- M칠tricas principales ---
    st.subheader(f"Resumen del Repositorio: {selected_repo}")

    col1, col2, col3 = st.columns(3)
    col1.metric("Total Commits", len(filtered_commits))
    col2.metric("Issues Abiertos", int(filtered_repo_info['open_issues'].values[0]) if 'open_issues' in filtered_repo_info else 0)
    col3.metric("Pull Requests", int(filtered_repo_info['pull_requests'].values[0]) if 'pull_requests' in filtered_repo_info else 0)

    # --- Tablas de datos ---
    st.subheader("Detalles de Commits")
    st.dataframe(filtered_commits)

    st.subheader("Informaci칩n del Repositorio")
    st.dataframe(filtered_repo_info)

    # --- Espacios reservados para gr치ficos futuros ---
    st.subheader("Actividad de Commits (Gr치ficos pronto)")
    st.info("Aqu칤 se graficar치 la actividad mensual de commits.")

    st.subheader("Lenguajes de Programaci칩n Detectados (Gr치ficos pronto)")
    st.info("Aqu칤 se mostrar치 la distribuci칩n de lenguajes.")

    st.subheader("Documentaci칩n Detectada")
    st.info("Aqu칤 se mostrar치 si hay README.md o informes .docx / .md.")

# --- Main ---
def main():
    if "logged_in" not in st.session_state:
        st.session_state["logged_in"] = False

    if not st.session_state["logged_in"]:
        login()
    else:
        dashboard()

if __name__ == "__main__":
    main()
